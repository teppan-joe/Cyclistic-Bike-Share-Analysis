{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":7443561,"sourceType":"datasetVersion","datasetId":4332619}],"dockerImageVersionId":30635,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport calendar\nfrom haversine import haversine, Unit\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n\ncustom_palette = {\"Casual\": \"#e8f6b1\", \"Annual\": \"#65c3bf\"}\nsns.set_theme(style=\"ticks\", palette=\"crest\", font_scale=0.9)","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-19T03:47:11.435490Z","iopub.execute_input":"2024-04-19T03:47:11.436006Z","iopub.status.idle":"2024-04-19T03:47:11.445098Z","shell.execute_reply.started":"2024-04-19T03:47:11.435967Z","shell.execute_reply":"2024-04-19T03:47:11.443945Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv(r\"/kaggle/input/cyclistic-cleaned-data/CyclisticData.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-04-19T03:47:11.451436Z","iopub.execute_input":"2024-04-19T03:47:11.451864Z","iopub.status.idle":"2024-04-19T03:47:59.389298Z","shell.execute_reply.started":"2024-04-19T03:47:11.451829Z","shell.execute_reply":"2024-04-19T03:47:59.388244Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T03:47:59.391936Z","iopub.execute_input":"2024-04-19T03:47:59.393079Z","iopub.status.idle":"2024-04-19T03:47:59.407679Z","shell.execute_reply.started":"2024-04-19T03:47:59.393025Z","shell.execute_reply":"2024-04-19T03:47:59.406439Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.describe()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T03:47:59.409201Z","iopub.execute_input":"2024-04-19T03:47:59.409911Z","iopub.status.idle":"2024-04-19T03:48:00.095504Z","shell.execute_reply.started":"2024-04-19T03:47:59.409875Z","shell.execute_reply":"2024-04-19T03:48:00.094265Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T03:48:00.098942Z","iopub.execute_input":"2024-04-19T03:48:00.099924Z","iopub.status.idle":"2024-04-19T03:48:07.879659Z","shell.execute_reply.started":"2024-04-19T03:48:00.099887Z","shell.execute_reply":"2024-04-19T03:48:07.878503Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.nunique()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T03:48:07.881189Z","iopub.execute_input":"2024-04-19T03:48:07.881842Z","iopub.status.idle":"2024-04-19T03:48:27.765634Z","shell.execute_reply.started":"2024-04-19T03:48:07.881799Z","shell.execute_reply":"2024-04-19T03:48:27.764502Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['Ride_Length_In_Minutes'] = df['Ride_Length_In_Seconds'] / 60\ndf.drop(columns=['Ride_Length_In_Seconds'], inplace=True)\ndf.info()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T03:48:27.767128Z","iopub.execute_input":"2024-04-19T03:48:27.768067Z","iopub.status.idle":"2024-04-19T03:48:29.250911Z","shell.execute_reply.started":"2024-04-19T03:48:27.768021Z","shell.execute_reply":"2024-04-19T03:48:29.249719Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.describe()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T03:48:29.252313Z","iopub.execute_input":"2024-04-19T03:48:29.252649Z","iopub.status.idle":"2024-04-19T03:48:30.071953Z","shell.execute_reply.started":"2024-04-19T03:48:29.252616Z","shell.execute_reply":"2024-04-19T03:48:30.070846Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"execution":{"iopub.status.busy":"2024-04-19T03:48:30.074192Z","iopub.execute_input":"2024-04-19T03:48:30.074986Z","iopub.status.idle":"2024-04-19T03:48:30.104655Z","shell.execute_reply.started":"2024-04-19T03:48:30.074943Z","shell.execute_reply":"2024-04-19T03:48:30.103784Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = df[(df['End_Latitude'] != 'Unknown') & (df['End_Longitude'] != 'Unknown')]\ndf.info()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T03:48:30.105816Z","iopub.execute_input":"2024-04-19T03:48:30.106120Z","iopub.status.idle":"2024-04-19T03:48:33.065929Z","shell.execute_reply.started":"2024-04-19T03:48:30.106093Z","shell.execute_reply":"2024-04-19T03:48:33.064745Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = df[(df['Start_Latitude'] != 0) & (df['Start_Longitude'] != 0) & (df['End_Longitude'] != 0) & (df['End_Latitude'] != 0)]\ndf.info()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T03:48:33.071943Z","iopub.execute_input":"2024-04-19T03:48:33.072292Z","iopub.status.idle":"2024-04-19T03:48:36.466600Z","shell.execute_reply.started":"2024-04-19T03:48:33.072263Z","shell.execute_reply":"2024-04-19T03:48:36.465243Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['Ride_Length'] = pd.to_timedelta(df['Ride_Length'])\nconvert_dtypes = {'Ride_ID': 'string', \n                'Bike_Type': 'category', \n                'Member_Type': 'category',\n                'Start_Station_Name': 'string',\n                'End_Station_Name': 'string',\n                'Start_Station_ID': 'string',\n                'End_Station_ID': 'string',\n                'Start_Latitude': 'float64', \n                'Start_Longitude': 'float64', \n                'End_Latitude': 'float64',\n                'End_Longitude': 'float64',\n                'Season': 'category', \n                'Day_Of_Week': 'category', \n                'Started_Datetime': 'datetime64[ns]', \n                'Ended_Datetime': 'datetime64[ns]', \n                'Ride_Length_In_Minutes': 'float32'}\ndf = df.astype(convert_dtypes)\ndf.info()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T03:48:36.468033Z","iopub.execute_input":"2024-04-19T03:48:36.468349Z","iopub.status.idle":"2024-04-19T03:48:55.303185Z","shell.execute_reply.started":"2024-04-19T03:48:36.468320Z","shell.execute_reply":"2024-04-19T03:48:55.302003Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df[(df['Start_Station_Name'] == 'Unknown') | (df['End_Station_Name'] == 'Unknown')]","metadata":{"execution":{"iopub.status.busy":"2024-04-19T03:48:55.304960Z","iopub.execute_input":"2024-04-19T03:48:55.305290Z","iopub.status.idle":"2024-04-19T03:48:57.487504Z","shell.execute_reply.started":"2024-04-19T03:48:55.305261Z","shell.execute_reply":"2024-04-19T03:48:57.486008Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_start_station_u = df[(df['Start_Station_Name'] == 'Unknown')].groupby(['Start_Latitude','Start_Longitude'])['Ride_ID'].count().reset_index()\ndf_end_station_u = df[(df['End_Station_Name'] == 'Unknown')].groupby(['End_Latitude','End_Longitude'])['Ride_ID'].count().reset_index()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T03:48:57.489155Z","iopub.execute_input":"2024-04-19T03:48:57.489553Z","iopub.status.idle":"2024-04-19T03:49:00.221183Z","shell.execute_reply.started":"2024-04-19T03:48:57.489517Z","shell.execute_reply":"2024-04-19T03:49:00.220015Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from geopy.geocoders import Nominatim\nfrom geopy.exc import GeocoderTimedOut\n\ndef get_street_name(latitude, longitude):\n    try:\n        geolocator = Nominatim(user_agent=\"Cyclistic-Bike-Share\")\n        location = geolocator.reverse((latitude, longitude), language='en', timeout=10)\n        address = location.address\n        # Extracting street name from address\n        address_parts = address.split(\",\")\n        if address_parts[0].strip().isdigit():\n            # If so, concatenate the first and second parts\n            street_name = address_parts[0].strip() + \" \" + address_parts[1].strip()\n        else:\n            # Otherwise, take the first part as the street name\n            street_name = address_parts[1].strip() + \" \" + address_parts[0].strip()\n        return street_name\n    except GeocoderTimedOut:\n        return \"Geocoding service timed out\"","metadata":{"execution":{"iopub.status.busy":"2024-04-19T03:49:00.230052Z","iopub.execute_input":"2024-04-19T03:49:00.230985Z","iopub.status.idle":"2024-04-19T03:49:00.241808Z","shell.execute_reply.started":"2024-04-19T03:49:00.230951Z","shell.execute_reply":"2024-04-19T03:49:00.241048Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def add_street_names(df_station_u, latitude_col, longitude_col):\n    street_names = []\n    for index, row in df_station_u.iterrows():\n        latitude = row[latitude_col]\n        longitude = row[longitude_col]\n        street_name = get_street_name(latitude, longitude)\n        street_names.append(street_name)\n    df_station_u['Street_Name'] = street_names\n    return df_station_u\n\ndf_start_station_u = add_street_names(df_start_station_u, 'Start_Latitude', 'Start_Longitude')\ndf_end_station_u = add_street_names(df_end_station_u, 'End_Latitude', 'End_Longitude')","metadata":{"execution":{"iopub.status.busy":"2024-04-19T03:49:00.243203Z","iopub.execute_input":"2024-04-19T03:49:00.243831Z","iopub.status.idle":"2024-04-19T03:59:03.388081Z","shell.execute_reply.started":"2024-04-19T03:49:00.243783Z","shell.execute_reply":"2024-04-19T03:59:03.386643Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_start_station_u","metadata":{"execution":{"iopub.status.busy":"2024-04-19T03:59:03.390400Z","iopub.execute_input":"2024-04-19T03:59:03.390782Z","iopub.status.idle":"2024-04-19T03:59:03.406421Z","shell.execute_reply.started":"2024-04-19T03:59:03.390732Z","shell.execute_reply":"2024-04-19T03:59:03.405618Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_end_station_u","metadata":{"execution":{"iopub.status.busy":"2024-04-19T03:59:03.407782Z","iopub.execute_input":"2024-04-19T03:59:03.408117Z","iopub.status.idle":"2024-04-19T03:59:03.428043Z","shell.execute_reply.started":"2024-04-19T03:59:03.408087Z","shell.execute_reply":"2024-04-19T03:59:03.426991Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Merge df_start_station_u into df based on Start_Latitude and Start_Longitude\ndf = pd.merge(df, df_start_station_u[['Start_Latitude', 'Start_Longitude', 'Street_Name']], \n              on=['Start_Latitude', 'Start_Longitude'], how='left')\n\n# Replace 'Start_Station_Name' == 'Unknown' with the Street_Name where available\ndf.loc[df['Start_Station_Name'] == 'Unknown', 'Start_Station_Name'] = df['Street_Name']\n\n# Drop the 'Street_Name' column as it's no longer needed\ndf.drop(columns=['Street_Name'], inplace=True)\n\n# Merge df_end_station_u into df based on End_Latitude and End_Longitude\ndf = pd.merge(df, df_end_station_u[['End_Latitude', 'End_Longitude', 'Street_Name']], \n              on=['End_Latitude', 'End_Longitude'], how='left')\n\n# Replace 'End_Station_Name' == 'Unknown' with the Street_Name where available\ndf.loc[df['End_Station_Name'] == 'Unknown', 'End_Station_Name'] = df['Street_Name']\n\n# Drop the 'Street_Name' column as it's no longer needed\ndf.drop(columns=['Street_Name'], inplace=True)\n\ndf","metadata":{"execution":{"iopub.status.busy":"2024-04-19T03:59:03.429364Z","iopub.execute_input":"2024-04-19T03:59:03.429775Z","iopub.status.idle":"2024-04-19T03:59:14.635951Z","shell.execute_reply.started":"2024-04-19T03:59:03.429732Z","shell.execute_reply":"2024-04-19T03:59:14.634443Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['Ride_Length_In_Minutes'].describe()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T03:59:14.638068Z","iopub.execute_input":"2024-04-19T03:59:14.638547Z","iopub.status.idle":"2024-04-19T03:59:14.864915Z","shell.execute_reply.started":"2024-04-19T03:59:14.638504Z","shell.execute_reply":"2024-04-19T03:59:14.863784Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.describe()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T03:59:14.866977Z","iopub.execute_input":"2024-04-19T03:59:14.867407Z","iopub.status.idle":"2024-04-19T03:59:16.981853Z","shell.execute_reply.started":"2024-04-19T03:59:14.867368Z","shell.execute_reply":"2024-04-19T03:59:16.980565Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = df[df['Ride_Length'] > pd.Timedelta(minutes=2)]\ndf.info()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T03:59:16.983168Z","iopub.execute_input":"2024-04-19T03:59:16.983482Z","iopub.status.idle":"2024-04-19T03:59:18.374638Z","shell.execute_reply.started":"2024-04-19T03:59:16.983453Z","shell.execute_reply":"2024-04-19T03:59:18.373446Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Calculate mean and standard deviation\nmean = df['Ride_Length_In_Minutes'].mean()\nstd_dev = df['Ride_Length_In_Minutes'].std()\n\n# Calculate z-score for each data point\nz_score = (df['Ride_Length_In_Minutes'] - mean) / std_dev\n\n# Set threshold (e.g., 3 standard deviations)\nthreshold = 3\n\n# Identify extreme outliers\nextreme_outliers = df[z_score > threshold]\n\n# Remove extreme outliers from DataFrame\ndf = df[z_score <= threshold]","metadata":{"execution":{"iopub.status.busy":"2024-04-19T03:59:18.376425Z","iopub.execute_input":"2024-04-19T03:59:18.376793Z","iopub.status.idle":"2024-04-19T03:59:19.966666Z","shell.execute_reply.started":"2024-04-19T03:59:18.376739Z","shell.execute_reply":"2024-04-19T03:59:19.965679Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"execution":{"iopub.status.busy":"2024-04-19T03:59:19.968232Z","iopub.execute_input":"2024-04-19T03:59:19.968645Z","iopub.status.idle":"2024-04-19T03:59:20.008260Z","shell.execute_reply.started":"2024-04-19T03:59:19.968599Z","shell.execute_reply":"2024-04-19T03:59:20.007090Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(10, 6))\nplt.hist(df['Ride_Length_In_Minutes'], bins=50, color='skyblue', edgecolor='black')\nplt.title('Distribution of Ride Durations')\nplt.xlabel('Ride Duration (minutes)')\nplt.ylabel('Frequency')\nplt.grid(True)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T03:59:20.010192Z","iopub.execute_input":"2024-04-19T03:59:20.010631Z","iopub.status.idle":"2024-04-19T03:59:20.432676Z","shell.execute_reply.started":"2024-04-19T03:59:20.010586Z","shell.execute_reply":"2024-04-19T03:59:20.431661Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['Ride_Distance'] = df.apply(lambda row: haversine((row['Start_Latitude'], row['Start_Longitude']), (row['End_Latitude'], row['End_Longitude']), unit=Unit.KILOMETERS), axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-04-19T03:59:20.434054Z","iopub.execute_input":"2024-04-19T03:59:20.434427Z","iopub.status.idle":"2024-04-19T04:02:36.964218Z","shell.execute_reply.started":"2024-04-19T03:59:20.434393Z","shell.execute_reply":"2024-04-19T04:02:36.962864Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pd.set_option('display.max_columns', 10)\ndf.info()\ndf","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:02:36.965937Z","iopub.execute_input":"2024-04-19T04:02:36.966309Z","iopub.status.idle":"2024-04-19T04:02:39.803908Z","shell.execute_reply.started":"2024-04-19T04:02:36.966277Z","shell.execute_reply":"2024-04-19T04:02:39.802743Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.describe()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:02:39.813488Z","iopub.execute_input":"2024-04-19T04:02:39.814627Z","iopub.status.idle":"2024-04-19T04:02:42.178573Z","shell.execute_reply.started":"2024-04-19T04:02:39.814588Z","shell.execute_reply":"2024-04-19T04:02:42.177430Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['Ride_Length_In_Hours'] = df['Ride_Length_In_Minutes'] / 60\ndf['Ride_Speed_kph'] = df['Ride_Distance'] / df['Ride_Length_In_Hours']","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:02:42.180193Z","iopub.execute_input":"2024-04-19T04:02:42.180695Z","iopub.status.idle":"2024-04-19T04:02:42.230648Z","shell.execute_reply.started":"2024-04-19T04:02:42.180656Z","shell.execute_reply":"2024-04-19T04:02:42.229665Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['Ride_Speed_kph']","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:02:42.231813Z","iopub.execute_input":"2024-04-19T04:02:42.232175Z","iopub.status.idle":"2024-04-19T04:02:42.242034Z","shell.execute_reply.started":"2024-04-19T04:02:42.232144Z","shell.execute_reply":"2024-04-19T04:02:42.240742Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.columns","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:02:42.243870Z","iopub.execute_input":"2024-04-19T04:02:42.244381Z","iopub.status.idle":"2024-04-19T04:02:42.252897Z","shell.execute_reply.started":"2024-04-19T04:02:42.244340Z","shell.execute_reply":"2024-04-19T04:02:42.251693Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"median_ride_speed = df['Ride_Speed_kph'].median()\ndf['Ride_Distance'] = np.where(df['Ride_Distance'] < 0.2, df['Ride_Length_In_Hours'] * median_ride_speed, df['Ride_Distance'])\ndf['Ride_Speed_kph'] = np.where(df['Ride_Speed_kph'] == 0.0, df['Ride_Distance'] / df['Ride_Length_In_Hours'], df['Ride_Speed_kph'])","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:02:42.254556Z","iopub.execute_input":"2024-04-19T04:02:42.254999Z","iopub.status.idle":"2024-04-19T04:02:42.491816Z","shell.execute_reply.started":"2024-04-19T04:02:42.254960Z","shell.execute_reply":"2024-04-19T04:02:42.490848Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"median_ride_speed","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:42:18.998487Z","iopub.execute_input":"2024-04-19T04:42:18.999041Z","iopub.status.idle":"2024-04-19T04:42:19.007223Z","shell.execute_reply.started":"2024-04-19T04:42:18.999005Z","shell.execute_reply":"2024-04-19T04:42:19.005848Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.drop(columns=['Ride_Speed_kph','Ride_Length_In_Hours'], inplace=True)\ndf","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:02:42.493354Z","iopub.execute_input":"2024-04-19T04:02:42.493807Z","iopub.status.idle":"2024-04-19T04:02:46.358336Z","shell.execute_reply.started":"2024-04-19T04:02:42.493749Z","shell.execute_reply":"2024-04-19T04:02:46.357220Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.describe()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:02:46.370622Z","iopub.execute_input":"2024-04-19T04:02:46.371131Z","iopub.status.idle":"2024-04-19T04:02:48.728695Z","shell.execute_reply.started":"2024-04-19T04:02:46.371100Z","shell.execute_reply":"2024-04-19T04:02:48.727585Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Calculate mean and standard deviation\nmean = df['Ride_Distance'].mean()\nstd_dev = df['Ride_Distance'].std()\n\n# Calculate z-score for each data point\nz_score = (df['Ride_Distance'] - mean) / std_dev\n\n# Set threshold (e.g., 3 standard deviations)\nthreshold = 3\n\n# Identify extreme outliers\nextreme_outliers = df[z_score > threshold]\n\n# Remove extreme outliers from DataFrame\ndf = df[z_score <= threshold]","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:02:48.749892Z","iopub.execute_input":"2024-04-19T04:02:48.750248Z","iopub.status.idle":"2024-04-19T04:02:50.279935Z","shell.execute_reply.started":"2024-04-19T04:02:48.750219Z","shell.execute_reply":"2024-04-19T04:02:50.278895Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:02:50.281129Z","iopub.execute_input":"2024-04-19T04:02:50.281430Z","iopub.status.idle":"2024-04-19T04:02:52.999005Z","shell.execute_reply.started":"2024-04-19T04:02:50.281403Z","shell.execute_reply":"2024-04-19T04:02:52.998005Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:02:53.000367Z","iopub.execute_input":"2024-04-19T04:02:53.000684Z","iopub.status.idle":"2024-04-19T04:02:53.014467Z","shell.execute_reply.started":"2024-04-19T04:02:53.000656Z","shell.execute_reply":"2024-04-19T04:02:53.013111Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.describe()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:02:53.016375Z","iopub.execute_input":"2024-04-19T04:02:53.016727Z","iopub.status.idle":"2024-04-19T04:02:55.325484Z","shell.execute_reply.started":"2024-04-19T04:02:53.016695Z","shell.execute_reply":"2024-04-19T04:02:55.324398Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## Export the clean dataset (optional)\n# filename = 'cyclist_clean.csv'\n# df.to_csv(filename, index=False)","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:02:55.327103Z","iopub.execute_input":"2024-04-19T04:02:55.327451Z","iopub.status.idle":"2024-04-19T04:02:55.331990Z","shell.execute_reply.started":"2024-04-19T04:02:55.327422Z","shell.execute_reply":"2024-04-19T04:02:55.330714Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"member_type = df[\"Member_Type\"].value_counts()\ntotal_count = member_type.sum()\nmember_type_df = pd.DataFrame(member_type)\nmember_type_df.columns = ['Count']\nmember_type_df.loc['Total'] = total_count\n\nplt.figure(figsize=(4, 4))\nplt.pie(member_type.values, labels=member_type.index, autopct='%1.1f%%', startangle=90, colors=[custom_palette.get(member, '#CCCCCC') for member in member_type.index])\nplt.title('Distribution of Member Types')\nplt.axis('equal')\n\nprint(member_type_df)","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:02:55.333805Z","iopub.execute_input":"2024-04-19T04:02:55.334233Z","iopub.status.idle":"2024-04-19T04:02:55.496873Z","shell.execute_reply.started":"2024-04-19T04:02:55.334191Z","shell.execute_reply":"2024-04-19T04:02:55.496054Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"bike_types = df.groupby([\"Bike_Type\", \"Member_Type\"])['Ride_ID'].count().reset_index()\n\nplt.figure(figsize=(6, 5))\nsns.barplot(x='Bike_Type', y='Ride_ID', hue='Member_Type', data=bike_types, palette=custom_palette)\n\ntotal_counts = sum([p.get_height() for p in plt.gca().patches])\nfor p in plt.gca().patches:\n    plt.annotate('{:.1f}%'.format(p.get_height() / total_counts * 100),\n                 (p.get_x() + p.get_width() / 2., p.get_height()),\n                 ha='center', va='bottom', fontsize=8, color='black', xytext=(0, 1),\n                 textcoords='offset points')\nplt.show()\n\nprint(bike_types)","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:02:55.498711Z","iopub.execute_input":"2024-04-19T04:02:55.499876Z","iopub.status.idle":"2024-04-19T04:02:56.586004Z","shell.execute_reply.started":"2024-04-19T04:02:55.499812Z","shell.execute_reply":"2024-04-19T04:02:56.584819Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"months = df['Started_Datetime'].dt.month\nhours = df['Started_Datetime'].dt.hour\ndays = df['Started_Datetime'].dt.day\nweek_order = [\"Monday\",\"Tuesday\",\"Wednesday\",'Thursday','Friday','Saturday','Sunday']\ndf['Day_Of_Week'] = pd.Categorical(df['Day_Of_Week'], categories=week_order, ordered=True)\nseason_order = [\"Spring\",\"Summer\",\"Fall\",\"Winter\"]\ndf['Season'] = pd.Categorical(df['Season'], categories=season_order, ordered=True)\nhours_order = sorted(hours.unique())\ndays_order = sorted(days.unique())\n\nannual_members = df[df['Member_Type']=='Annual']\ncasual_members = df[df['Member_Type']=='Casual']","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:02:56.587477Z","iopub.execute_input":"2024-04-19T04:02:56.587853Z","iopub.status.idle":"2024-04-19T04:02:59.734807Z","shell.execute_reply.started":"2024-04-19T04:02:56.587819Z","shell.execute_reply":"2024-04-19T04:02:59.733558Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"monthly_counts = df.groupby([months, \"Member_Type\"])['Ride_ID'].count().reset_index()\nmonth_names = [calendar.month_name[month] for month in sorted(months.unique())]\nday_counts = df.groupby([df[\"Started_Datetime\"].dt.day,\"Member_Type\"])['Ride_ID'].count().reset_index()\nweek_counts = df.groupby([\"Day_Of_Week\",\"Member_Type\"])['Ride_ID'].count().reset_index()\nhour_counts = df.groupby([df[\"Started_Datetime\"].dt.hour,\"Member_Type\"])['Ride_ID'].count().reset_index()\nseason_counts = df.groupby([\"Season\",\"Member_Type\"])['Ride_ID'].count().reset_index()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:02:59.736518Z","iopub.execute_input":"2024-04-19T04:02:59.736920Z","iopub.status.idle":"2024-04-19T04:03:04.258268Z","shell.execute_reply.started":"2024-04-19T04:02:59.736886Z","shell.execute_reply":"2024-04-19T04:03:04.257340Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Define the data and corresponding labels\ndata = {\n    (0, 0): {'x': 'Started_Datetime', 'y': 'Ride_ID', 'hue': 'Member_Type', 'title': 'Trips Taken in a Year', 'xlabel': 'Month', 'xticklabels': month_names, 'xtickrotation': 30, 'data': monthly_counts},\n    (0, 1): {'x': 'Day_Of_Week', 'y': 'Ride_ID', 'hue': 'Member_Type', 'title': 'Trips Taken in a Week', 'xlabel': 'Day', 'xticklabels': week_order, 'xtickrotation': 30, 'data': week_counts},\n    (1, 0): {'x': 'Started_Datetime', 'y': 'Ride_ID', 'hue': 'Member_Type', 'title': 'Trips Taken in a Month', 'xlabel': 'Date', 'xticklabels': days_order, 'xtickrotation': 60, 'data': day_counts},\n    (1, 1): {'x': 'Started_Datetime', 'y': 'Ride_ID', 'hue': 'Member_Type', 'title': 'Trips Taken in a Day', 'xlabel': 'Hour', 'xticklabels': hours_order, 'xtickrotation': 60, 'data': hour_counts}\n}\n\n# Create subplots\nfig, axes = plt.subplots(2, 2, figsize=(14, 11), sharey=False)\n\n# Iterate over the data and axes to plot barplots\nfor (i, j), plot_data in data.items():\n    sns.barplot(x=plot_data['x'], y=plot_data['y'], hue=plot_data['hue'], data=plot_data['data'], palette=custom_palette, ax=axes[i, j])\n    axes[i, j].set_title(plot_data['title'])\n    axes[i, j].set_xlabel(plot_data['xlabel'])\n    axes[i, j].set_ylabel('Number of Trips')\n    axes[i, j].set_xticklabels(labels=plot_data['xticklabels'], rotation=plot_data['xtickrotation'], ha='right')\n    \n    total_counts = sum([p.get_height() for p in axes[i, j].patches])\n\n    for p in axes[i, j].patches:\n        axes[i, j].annotate('{:.1f}%'.format(p.get_height() / total_counts * 100),\n                            (p.get_x() + p.get_width() / 2., p.get_height()),\n                            ha='center', va='bottom', fontsize=6, color='black', xytext=(0, 1),\n                            textcoords='offset points')\n        \nplt.suptitle(\"Trips Taken in Every Timeframe\", fontsize=14)\n\nplt.tight_layout()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:03:04.260122Z","iopub.execute_input":"2024-04-19T04:03:04.260478Z","iopub.status.idle":"2024-04-19T04:03:07.548948Z","shell.execute_reply.started":"2024-04-19T04:03:04.260447Z","shell.execute_reply":"2024-04-19T04:03:07.547826Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"monthly_counts","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:03:07.550473Z","iopub.execute_input":"2024-04-19T04:03:07.551352Z","iopub.status.idle":"2024-04-19T04:03:07.566215Z","shell.execute_reply.started":"2024-04-19T04:03:07.551308Z","shell.execute_reply":"2024-04-19T04:03:07.565038Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"week_counts","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:03:07.567908Z","iopub.execute_input":"2024-04-19T04:03:07.568502Z","iopub.status.idle":"2024-04-19T04:03:07.582732Z","shell.execute_reply.started":"2024-04-19T04:03:07.568469Z","shell.execute_reply":"2024-04-19T04:03:07.581580Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"hour_counts","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:03:07.584555Z","iopub.execute_input":"2024-04-19T04:03:07.584940Z","iopub.status.idle":"2024-04-19T04:03:07.601300Z","shell.execute_reply.started":"2024-04-19T04:03:07.584910Z","shell.execute_reply":"2024-04-19T04:03:07.600178Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(7,6))\n\nsns.barplot(x='Season', y='Ride_ID', hue='Member_Type', data=season_counts, palette=custom_palette)\nplt.title('Trips Taken in each Season')\nplt.xlabel(\"Season\")\nplt.ylabel('Number of Trips')\nplt.xticks(ticks=range(len(season_order)), labels=season_order, rotation=30, ha='right')\ntotal_counts = sum([p.get_height() for p in plt.gca().patches])\nfor p in plt.gca().patches:\n    plt.annotate('{:.1f}%'.format(p.get_height() / total_counts * 100),\n                 (p.get_x() + p.get_width() / 2., p.get_height()),\n                 ha='center', va='bottom', fontsize=8, color='black', xytext=(0, 1),\n                 textcoords='offset points')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:03:07.602541Z","iopub.execute_input":"2024-04-19T04:03:07.602895Z","iopub.status.idle":"2024-04-19T04:03:07.938248Z","shell.execute_reply.started":"2024-04-19T04:03:07.602865Z","shell.execute_reply":"2024-04-19T04:03:07.937029Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"annual_pivot_month = pd.pivot_table(annual_members, index=months, columns=hours, values='Ride_ID',  aggfunc='count', fill_value=0, dropna=False)\nannual_pivot_month.index = month_names\nannual_pivot_month.columns = hours_order\n\nannual_pivot_week = pd.pivot_table(annual_members, index='Day_Of_Week', columns=hours, values='Ride_ID',  aggfunc='count', fill_value=0, dropna=False)\nannual_pivot_week.index = week_order\nannual_pivot_week.columns = hours_order\n\nannual_pivot_day = pd.pivot_table(annual_members, index=days, columns=hours, values='Ride_ID',  aggfunc='count', fill_value=0, dropna=False)\nannual_pivot_day.index = days_order\nannual_pivot_day.columns = hours_order\n\nannual_pivot_season = pd.pivot_table(annual_members, index='Season', columns=hours, values='Ride_ID',  aggfunc='count', fill_value=0, dropna=False)\nannual_pivot_season.index = season_order\nannual_pivot_season.columns = hours_order","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:03:07.939649Z","iopub.execute_input":"2024-04-19T04:03:07.940143Z","iopub.status.idle":"2024-04-19T04:03:11.566424Z","shell.execute_reply.started":"2024-04-19T04:03:07.940099Z","shell.execute_reply":"2024-04-19T04:03:11.565226Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"casual_pivot_month = pd.pivot_table(casual_members, index=months, columns=hours, values='Ride_ID',  aggfunc='count', fill_value=0, dropna=False)\ncasual_pivot_month.index = month_names\ncasual_pivot_month.columns = hours_order\n\ncasual_pivot_week = pd.pivot_table(casual_members, index='Day_Of_Week', columns=hours, values='Ride_ID',  aggfunc='count', fill_value=0, dropna=False)\ncasual_pivot_week.index = week_order\ncasual_pivot_week.columns = hours_order\n\ncasual_pivot_day = pd.pivot_table(casual_members, index=days, columns=hours, values='Ride_ID',  aggfunc='count', fill_value=0, dropna=False)\ncasual_pivot_day.index = days_order\ncasual_pivot_day.columns = hours_order\n\ncasual_pivot_season = pd.pivot_table(casual_members, index='Season', columns=hours, values='Ride_ID',  aggfunc='count', fill_value=0, dropna=False)\ncasual_pivot_season.index = season_order\ncasual_pivot_season.columns = hours_order","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:03:11.567893Z","iopub.execute_input":"2024-04-19T04:03:11.568241Z","iopub.status.idle":"2024-04-19T04:03:13.674508Z","shell.execute_reply.started":"2024-04-19T04:03:11.568210Z","shell.execute_reply":"2024-04-19T04:03:13.673501Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data = {\n    'Annual Members': {\n        'Month': annual_pivot_month,\n        'Day': annual_pivot_day,\n        'Week': annual_pivot_week,\n        'Season': annual_pivot_season\n    },\n    'Casual Members': {\n        'Month': casual_pivot_month,\n        'Day': casual_pivot_day,\n        'Week': casual_pivot_week,\n        'Season': casual_pivot_season\n    }\n}\n\n# Create subplots\nfig, axes = plt.subplots(nrows=4, ncols=2, figsize=(12, 16), sharex=True)\n\n# Iterate over data and axes to plot heatmaps\nfor i, (member_type, pivot_tables) in enumerate(data.items()):\n    for j, (time_period, pivot_table) in enumerate(pivot_tables.items()):\n        sns.heatmap(pivot_table, cmap='YlGnBu', fmt='g', cbar=True, ax=axes[j, i])\n        axes[j, i].set_xlabel('Hour')\n        axes[j, i].set_ylabel(time_period)\n\n        # Set title for each column\n        axes[j, i].set_title(member_type)\n\n# Set the overarching title for the entire subplot\nsuptitle = plt.suptitle(\"Comparison of Ride Patterns between Annual and Casual Members\", fontsize=14)\nsuptitle.set_y(1)\n\n# Rotate the y-tick labels for axes[3, 0] and axes[3, 1]\naxes[3, 0].set_yticklabels(axes[3, 0].get_yticklabels(), rotation=0)\naxes[3, 1].set_yticklabels(axes[3, 1].get_yticklabels(), rotation=0)\n\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:03:13.676028Z","iopub.execute_input":"2024-04-19T04:03:13.676577Z","iopub.status.idle":"2024-04-19T04:03:19.377147Z","shell.execute_reply.started":"2024-04-19T04:03:13.676545Z","shell.execute_reply":"2024-04-19T04:03:19.376240Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig, (ax1,ax2) = plt.subplots(2,2,figsize=(12,8))\nfor i, var in enumerate(['Ride_Length_In_Minutes', 'Ride_Distance']):\n    for j, user in enumerate(df['Member_Type'].unique()):\n        sns.kdeplot(df[df['Member_Type'] == user][var], ax=ax2[i], shade=True, label=user)\n        sns.boxenplot(x=var, y=\"Member_Type\", data=df, ax=ax1[i])\n        ax1[i].set(xlabel=\"\", ylabel=\"\")\n        ax2[i].set(ylabel=\"Density\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:03:19.378524Z","iopub.execute_input":"2024-04-19T04:03:19.379149Z","iopub.status.idle":"2024-04-19T04:04:23.838882Z","shell.execute_reply.started":"2024-04-19T04:03:19.379113Z","shell.execute_reply":"2024-04-19T04:04:23.837949Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"Log_Ride_Length = np.log(df['Ride_Length_In_Minutes'])\n\n# Visualize the transformed data\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))\n\n# Histogram of log-transformed data\nsns.histplot(Log_Ride_Length, ax=ax1, kde=True)\nax1.set(title='Log-Transformed Ride Length')\n\n# Box plot of log-transformed data\nsns.boxplot(y=Log_Ride_Length, x='Member_Type', data=df, ax=ax2)\nax2.set(title='Box Plot of Log-Transformed Ride Length')\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:04:23.840235Z","iopub.execute_input":"2024-04-19T04:04:23.841005Z","iopub.status.idle":"2024-04-19T04:04:56.001416Z","shell.execute_reply.started":"2024-04-19T04:04:23.840970Z","shell.execute_reply":"2024-04-19T04:04:56.000037Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"monthly_min_dist = df.groupby([months, \"Member_Type\"]).agg({'Ride_Length_In_Minutes': ['sum', 'median'],'Ride_Distance': ['sum', 'median']}).reset_index()\nweek_min_dist = df.groupby([\"Day_Of_Week\",\"Member_Type\"]).agg({'Ride_Length_In_Minutes': ['sum', 'median'],'Ride_Distance': ['sum', 'median']}).reset_index()\nhour_min_dist = df.groupby([df[\"Started_Datetime\"].dt.hour,\"Member_Type\"]).agg({'Ride_Length_In_Minutes': ['sum', 'median'],'Ride_Distance': ['sum', 'median']}).reset_index()\nseason_min_dist = df.groupby([\"Season\",\"Member_Type\"]).agg({'Ride_Length_In_Minutes': ['sum', 'median'],'Ride_Distance': ['sum', 'median']}).reset_index()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:05:18.669367Z","iopub.execute_input":"2024-04-19T04:05:18.669956Z","iopub.status.idle":"2024-04-19T04:05:21.949471Z","shell.execute_reply.started":"2024-04-19T04:05:18.669921Z","shell.execute_reply":"2024-04-19T04:05:21.948143Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.groupby(\"Member_Type\").agg({'Ride_Length_In_Minutes': ['sum', 'median'],'Ride_Distance': ['sum', 'median']})","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:05:21.951105Z","iopub.execute_input":"2024-04-19T04:05:21.951498Z","iopub.status.idle":"2024-04-19T04:05:22.437785Z","shell.execute_reply.started":"2024-04-19T04:05:21.951462Z","shell.execute_reply":"2024-04-19T04:05:22.436571Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Define the data and corresponding labels\ndata = {\n    (0,0): {'x': 'Started_Datetime', 'y': ('Ride_Length_In_Minutes', 'sum'), 'hue': 'Member_Type', 'title': 'Minutes Spent in a Year', 'xlabel': 'Month', 'xticklabels': month_names, 'xtickrotation': 30, 'data': monthly_min_dist},\n    (1,0): {'x': 'Day_Of_Week', 'y': ('Ride_Length_In_Minutes', 'sum'), 'hue': 'Member_Type', 'title': 'Minutes Spent in a Week', 'xlabel': 'Day', 'xticklabels': week_order, 'xtickrotation': 30, 'data': week_min_dist},\n    (2,0): {'x': 'Started_Datetime', 'y': ('Ride_Length_In_Minutes', 'sum'), 'hue': 'Member_Type', 'title': 'Minutes Spent in a Day', 'xlabel': 'Hour', 'xticklabels': hours_order, 'xtickrotation': 60, 'data': hour_min_dist},\n    (3,0): {'x': 'Season', 'y': ('Ride_Length_In_Minutes', 'sum'), 'hue': 'Member_Type', 'title': 'Minutes Spent in a Season', 'xlabel': 'Season', 'xticklabels': season_order, 'xtickrotation': 0, 'data': season_min_dist},\n    (0,1): {'x': 'Started_Datetime', 'y': ('Ride_Distance', 'sum'), 'hue': 'Member_Type', 'title': 'Total Distance in a Year', 'xlabel': 'Month', 'xticklabels': month_names, 'xtickrotation': 30, 'data': monthly_min_dist},\n    (1,1): {'x': 'Day_Of_Week', 'y': ('Ride_Distance', 'sum'), 'hue': 'Member_Type', 'title': 'Total Distance in a Week', 'xlabel': 'Day', 'xticklabels': week_order, 'xtickrotation': 30, 'data': week_min_dist},\n    (2,1): {'x': 'Started_Datetime', 'y': ('Ride_Distance', 'sum'), 'hue': 'Member_Type', 'title': 'Total Distance in a Day', 'xlabel': 'Hour', 'xticklabels': hours_order, 'xtickrotation': 60, 'data': hour_min_dist},\n    (3,1): {'x': 'Season', 'y': ('Ride_Distance', 'sum'), 'hue': 'Member_Type', 'title': 'Total Distance in a Season', 'xlabel': 'Season', 'xticklabels': season_order, 'xtickrotation': 0, 'data': season_min_dist}\n}\n\n# Create subplots\nfig, axes = plt.subplots(4, 2, figsize=(14, 20), sharey=False)\n\n# Iterate over the data and axes to plot barplots\nfor (i, j), plot_data in data.items():\n    sns.barplot(x=plot_data['x'], y=plot_data['data'][plot_data['y']], hue=plot_data['hue'], data=plot_data['data'], palette=custom_palette, ax=axes[i, j])\n    axes[i, j].set_title(plot_data['title'])\n    axes[i, j].set_xlabel(plot_data['xlabel'])\n    axes[i, j].set_ylabel('Total Minutes Spent' if j == 0 else 'Total Distance (Km)')\n    axes[i, j].set_xticklabels(labels=plot_data['xticklabels'], rotation=plot_data['xtickrotation'], ha='right')\n    \n    total_counts = sum([p.get_height() for p in axes[i, j].patches])\n\n    for p in axes[i, j].patches:\n        axes[i, j].annotate('{:.1f}%'.format(p.get_height() / total_counts * 100),\n                            (p.get_x() + p.get_width() / 2., p.get_height()),\n                            ha='center', va='bottom', fontsize=6, color='black', xytext=(0, 1),\n                            textcoords='offset points')\n# Set the overarching title for the entire subplot\nsuptitle = plt.suptitle(\"Total Minutes Spent and Ride Distance in Every Timeframe\", fontsize=14)\nsuptitle.set_y(1)\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:05:22.439594Z","iopub.execute_input":"2024-04-19T04:05:22.440001Z","iopub.status.idle":"2024-04-19T04:05:28.065042Z","shell.execute_reply.started":"2024-04-19T04:05:22.439968Z","shell.execute_reply":"2024-04-19T04:05:28.063833Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"monthly_min_dist","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:05:28.066994Z","iopub.execute_input":"2024-04-19T04:05:28.067828Z","iopub.status.idle":"2024-04-19T04:05:28.092013Z","shell.execute_reply.started":"2024-04-19T04:05:28.067786Z","shell.execute_reply":"2024-04-19T04:05:28.090755Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"week_min_dist","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:05:28.093536Z","iopub.execute_input":"2024-04-19T04:05:28.093922Z","iopub.status.idle":"2024-04-19T04:05:28.118408Z","shell.execute_reply.started":"2024-04-19T04:05:28.093889Z","shell.execute_reply":"2024-04-19T04:05:28.117175Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"hour_min_dist","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:05:28.119657Z","iopub.execute_input":"2024-04-19T04:05:28.120046Z","iopub.status.idle":"2024-04-19T04:05:28.154694Z","shell.execute_reply.started":"2024-04-19T04:05:28.120012Z","shell.execute_reply":"2024-04-19T04:05:28.153320Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"season_min_dist","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:05:28.156798Z","iopub.execute_input":"2024-04-19T04:05:28.158206Z","iopub.status.idle":"2024-04-19T04:05:28.181218Z","shell.execute_reply.started":"2024-04-19T04:05:28.157940Z","shell.execute_reply":"2024-04-19T04:05:28.179834Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Define the data and corresponding labels\ndata = {\n    (0,0): {'x': 'Started_Datetime', 'y': ('Ride_Length_In_Minutes', 'median'), 'hue': 'Member_Type', 'title': 'Median Minutes Spent in a Year', 'xlabel': 'Month', 'xticklabels': month_names, 'xtickrotation': 30, 'data': monthly_min_dist},\n    (1,0): {'x': 'Day_Of_Week', 'y': ('Ride_Length_In_Minutes', 'median'), 'hue': 'Member_Type', 'title': 'Median Minutes Spent in a Week', 'xlabel': 'Day', 'xticklabels': week_order, 'xtickrotation': 30, 'data': week_min_dist},\n    (2,0): {'x': 'Started_Datetime', 'y': ('Ride_Length_In_Minutes', 'median'), 'hue': 'Member_Type', 'title': 'Median Minutes Spent in a Day', 'xlabel': 'Hour', 'xticklabels': hours_order, 'xtickrotation': 60, 'data': hour_min_dist},\n    (3,0): {'x': 'Season', 'y': ('Ride_Length_In_Minutes', 'median'), 'hue': 'Member_Type', 'title': 'Median Minutes Spent in a Season', 'xlabel': 'Season', 'xticklabels': season_order, 'xtickrotation': 0, 'data': season_min_dist},\n    (0,1): {'x': 'Started_Datetime', 'y': ('Ride_Distance', 'median'), 'hue': 'Member_Type', 'title': 'Median Total Distance in a Year', 'xlabel': 'Month', 'xticklabels': month_names, 'xtickrotation': 30, 'data': monthly_min_dist},\n    (1,1): {'x': 'Day_Of_Week', 'y': ('Ride_Distance', 'median'), 'hue': 'Member_Type', 'title': 'Median Total Distance in a Week', 'xlabel': 'Day', 'xticklabels': week_order, 'xtickrotation': 30, 'data': week_min_dist},\n    (2,1): {'x': 'Started_Datetime', 'y': ('Ride_Distance', 'median'), 'hue': 'Member_Type', 'title': 'Median Total Distance in a Day', 'xlabel': 'Hour', 'xticklabels': hours_order, 'xtickrotation': 60, 'data': hour_min_dist},\n    (3,1): {'x': 'Season', 'y': ('Ride_Distance', 'median'), 'hue': 'Member_Type', 'title': 'Median Total Distance in a Season', 'xlabel': 'Season', 'xticklabels': season_order, 'xtickrotation': 0, 'data': season_min_dist}\n}\n\n# Create subplots\nfig, axes = plt.subplots(4, 2, figsize=(14, 20), sharey=False)\n\n# Iterate over the data and axes to plot barplots\nfor (i, j), plot_data in data.items():\n    sns.barplot(x=plot_data['x'], y=plot_data['data'][plot_data['y']], hue=plot_data['hue'], data=plot_data['data'], palette=custom_palette, ax=axes[i, j])\n    axes[i, j].set_title(plot_data['title'])\n    axes[i, j].set_xlabel(plot_data['xlabel'])\n    axes[i, j].set_ylabel('Median Minutes Spent' if j == 0 else 'Median Distance (Km)')\n    axes[i, j].set_xticklabels(labels=plot_data['xticklabels'], rotation=plot_data['xtickrotation'], ha='right')\n    \n    total_counts = sum([p.get_height() for p in axes[i, j].patches])\n\n    for p in axes[i, j].patches:\n        axes[i, j].annotate('{:.1f}%'.format(p.get_height() / total_counts * 100),\n                            (p.get_x() + p.get_width() / 2., p.get_height()),\n                            ha='center', va='bottom', fontsize=6, color='black', xytext=(0, 1),\n                            textcoords='offset points')\n\n# Set the overarching title for the entire subplot\nsuptitle = plt.suptitle(\"Median Minutes Spent and Ride Distance in Every Timeframe\", fontsize=14)\nsuptitle.set_y(1)\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:57:03.872251Z","iopub.execute_input":"2024-04-19T04:57:03.872722Z","iopub.status.idle":"2024-04-19T04:57:08.855659Z","shell.execute_reply.started":"2024-04-19T04:57:03.872688Z","shell.execute_reply":"2024-04-19T04:57:08.854453Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"annual_start_station = annual_members.groupby(['Start_Station_Name','Start_Latitude','Start_Longitude'])['Ride_ID'].count().reset_index().rename(columns={\"Ride_ID\":\"Number of Trips\"}).sort_values(\"Number of Trips\",ascending=False)\ncasual_start_station = casual_members.groupby(['Start_Station_Name','Start_Latitude','Start_Longitude'])['Ride_ID'].count().reset_index().rename(columns={\"Ride_ID\":\"Number of Trips\"}).sort_values(\"Number of Trips\",ascending=False)","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:05:33.105943Z","iopub.execute_input":"2024-04-19T04:05:33.106809Z","iopub.status.idle":"2024-04-19T04:05:37.054520Z","shell.execute_reply.started":"2024-04-19T04:05:33.106747Z","shell.execute_reply":"2024-04-19T04:05:37.053236Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"annual_start_station","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:05:37.056209Z","iopub.execute_input":"2024-04-19T04:05:37.056584Z","iopub.status.idle":"2024-04-19T04:05:37.074301Z","shell.execute_reply.started":"2024-04-19T04:05:37.056551Z","shell.execute_reply":"2024-04-19T04:05:37.073003Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"casual_start_station","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:05:37.076047Z","iopub.execute_input":"2024-04-19T04:05:37.076542Z","iopub.status.idle":"2024-04-19T04:05:37.097014Z","shell.execute_reply.started":"2024-04-19T04:05:37.076497Z","shell.execute_reply":"2024-04-19T04:05:37.095899Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"top10_annual = annual_start_station.nlargest(10, 'Number of Trips')\ntop10_casual = casual_start_station.nlargest(10, 'Number of Trips')","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:05:37.098606Z","iopub.execute_input":"2024-04-19T04:05:37.099255Z","iopub.status.idle":"2024-04-19T04:05:37.192526Z","shell.execute_reply.started":"2024-04-19T04:05:37.099220Z","shell.execute_reply":"2024-04-19T04:05:37.191333Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig, axes = plt.subplots(1, 2, figsize=(12, 6), sharey=False)\n\nsns.barplot(x='Number of Trips', y='Start_Station_Name', data=top10_annual, ax=axes[0], palette='YlGnBu_r')\naxes[0].set_title('Top 10 Start Station Annual Members')\naxes[0].set_xlabel('Number of Trips')\naxes[0].set_ylabel('Start Station')\n\nsns.barplot(x='Number of Trips', y='Start_Station_Name', data=top10_casual, ax=axes[1], palette='YlGnBu_r')\naxes[1].set_title('Top 10 Start Station Casual Members')\naxes[1].set_xlabel('Start Station')\naxes[1].set_ylabel('')\n\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:05:37.194639Z","iopub.execute_input":"2024-04-19T04:05:37.195627Z","iopub.status.idle":"2024-04-19T04:05:37.962210Z","shell.execute_reply.started":"2024-04-19T04:05:37.195587Z","shell.execute_reply":"2024-04-19T04:05:37.960989Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"no_round_trip = df[(df['Start_Latitude']!=df['End_Latitude']) & (df['Start_Longitude']!=df['End_Longitude'])]\nroutes = df['Start_Station_Name'] + \" - \" + df['End_Station_Name']\nno_round_trip_routes = no_round_trip['Start_Station_Name'] + \" - \" + no_round_trip['End_Station_Name']\n\ncolumn_list = ['Start_Station_Name', 'End_Station_Name', 'Route', 'Start_Latitude', 'Start_Longitude', 'End_Latitude', 'End_Longitude', 'Distance', 'Number of Trips']\nannual_routes = annual_members.groupby([\n    annual_members['Start_Station_Name'],\n    annual_members['End_Station_Name'],\n    routes,\n    annual_members['Start_Latitude'],\n    annual_members['Start_Longitude'],\n    annual_members['End_Latitude'],\n    annual_members['End_Longitude']\n]).agg({'Ride_Distance': ['median', 'size']}).reset_index()\nannual_routes.columns = column_list\n\nannual_nr_routes = annual_members.groupby([\n    annual_members['Start_Station_Name'],\n    annual_members['End_Station_Name'],\n    no_round_trip_routes,\n    annual_members['Start_Latitude'],\n    annual_members['Start_Longitude'],\n    annual_members['End_Latitude'],\n    annual_members['End_Longitude']\n]).agg({'Ride_Distance': ['max', 'size']}).reset_index()\nannual_nr_routes.columns = column_list\n\ncasual_routes = casual_members.groupby([\n    casual_members['Start_Station_Name'],\n    casual_members['End_Station_Name'],\n    routes,\n    casual_members['Start_Latitude'],\n    casual_members['Start_Longitude'],\n    casual_members['End_Latitude'],\n    casual_members['End_Longitude']\n]).agg({'Ride_Distance': ['median', 'size']}).reset_index()\ncasual_routes.columns = column_list\n\ncasual_nr_routes = casual_members.groupby([\n    casual_members['Start_Station_Name'],\n    casual_members['End_Station_Name'],\n    no_round_trip_routes,\n    casual_members['Start_Latitude'],\n    casual_members['Start_Longitude'],\n    casual_members['End_Latitude'],\n    casual_members['End_Longitude']\n]).agg({'Ride_Distance': ['max', 'size']}).reset_index()\ncasual_nr_routes.columns = column_list","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:33:27.724347Z","iopub.execute_input":"2024-04-19T04:33:27.724803Z","iopub.status.idle":"2024-04-19T04:34:05.141985Z","shell.execute_reply.started":"2024-04-19T04:33:27.724742Z","shell.execute_reply":"2024-04-19T04:34:05.140662Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"annual_routes.sort_values('Number of Trips',ascending=False).head()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:34:05.144499Z","iopub.execute_input":"2024-04-19T04:34:05.144989Z","iopub.status.idle":"2024-04-19T04:34:05.525432Z","shell.execute_reply.started":"2024-04-19T04:34:05.144943Z","shell.execute_reply":"2024-04-19T04:34:05.524258Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"casual_routes.sort_values('Number of Trips',ascending=False).head()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:36:11.555970Z","iopub.execute_input":"2024-04-19T04:36:11.556489Z","iopub.status.idle":"2024-04-19T04:36:11.892838Z","shell.execute_reply.started":"2024-04-19T04:36:11.556452Z","shell.execute_reply":"2024-04-19T04:36:11.891718Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"annual_nr_routes.sort_values('Distance',ascending=False).head()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:36:14.163471Z","iopub.execute_input":"2024-04-19T04:36:14.163926Z","iopub.status.idle":"2024-04-19T04:36:14.865280Z","shell.execute_reply.started":"2024-04-19T04:36:14.163889Z","shell.execute_reply":"2024-04-19T04:36:14.864060Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"casual_nr_routes.sort_values('Distance',ascending=False).head()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:36:15.558369Z","iopub.execute_input":"2024-04-19T04:36:15.558789Z","iopub.status.idle":"2024-04-19T04:36:16.008987Z","shell.execute_reply.started":"2024-04-19T04:36:15.558735Z","shell.execute_reply":"2024-04-19T04:36:16.007777Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pd.set_option('display.max_columns', 100)\n\nno_round_trip.sort_values(\"Ride_Distance\",ascending=False).head()","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:06:19.444647Z","iopub.execute_input":"2024-04-19T04:06:19.445237Z","iopub.status.idle":"2024-04-19T04:06:25.242701Z","shell.execute_reply.started":"2024-04-19T04:06:19.445191Z","shell.execute_reply":"2024-04-19T04:06:25.241834Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import folium\nfrom folium.plugins import HeatMap\nfrom IPython.display import HTML","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:06:25.244391Z","iopub.execute_input":"2024-04-19T04:06:25.244788Z","iopub.status.idle":"2024-04-19T04:06:25.250553Z","shell.execute_reply.started":"2024-04-19T04:06:25.244734Z","shell.execute_reply":"2024-04-19T04:06:25.249166Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"m = folium.Map(location=[41.8781, -87.6298], zoom_start=11, tiles='OpenStreetMap')\n\n# Convert the DataFrame to list of lists for HeatMap\nheat_data = [[row['Start_Latitude'], row['Start_Longitude']] for index, row in annual_members.iterrows()]\n\n# Add heatmap layer to the map\nHeatMap(heat_data, min_opacity=0.2, blur=5, radius=5).add_to(m)\n\nfor index, row in top10_annual.iterrows():\n    folium.Marker([row['Start_Latitude'], row['Start_Longitude']], popup=row['Start_Station_Name']).add_to(m)\n    \n# Save the map to an HTML file or display it inline\nm.save(\"annual_members_start_station.html\")\niframe = '<iframe src=\"annual_members_start_station.html\" width=\"600\" height=\"800\"></iframe>'\n\ndisplay(HTML(iframe))","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:06:25.252507Z","iopub.execute_input":"2024-04-19T04:06:25.253003Z","iopub.status.idle":"2024-04-19T04:12:11.984274Z","shell.execute_reply.started":"2024-04-19T04:06:25.252955Z","shell.execute_reply":"2024-04-19T04:12:11.982930Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"m = folium.Map(location=[41.8781, -87.6298], zoom_start=11, tiles='OpenStreetMap')\n\n# Convert the DataFrame to list of lists for HeatMap\nheat_data = [[row['Start_Latitude'], row['Start_Longitude']] for index, row in casual_members.iterrows()]\n\n# Add heatmap layer to the map\nHeatMap(heat_data, min_opacity=0.2, blur=5, radius=5).add_to(m)\n\nfor index, row in top10_casual.iterrows():\n    folium.Marker([row['Start_Latitude'], row['Start_Longitude']], popup=row['Start_Station_Name']).add_to(m)\n    \n# Save the map to an HTML file or display it inline\nm.save(\"casual_members_start_station.html\")\niframe = '<iframe src=\"casual_members_start_station.html\" width=\"600\" height=\"800\"></iframe>'\n\ndisplay(HTML(iframe))","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:12:11.986028Z","iopub.execute_input":"2024-04-19T04:12:11.986395Z","iopub.status.idle":"2024-04-19T04:15:25.542111Z","shell.execute_reply.started":"2024-04-19T04:12:11.986361Z","shell.execute_reply":"2024-04-19T04:15:25.540783Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Assuming you have already extracted start and end coordinates\nannual_max_trips_route = annual_routes.loc[annual_routes['Number of Trips'].idxmax()]\nannual_max_dist_route = annual_nr_routes.loc[annual_nr_routes['Distance'].idxmax()]\ncasual_max_trips_route = casual_routes.loc[casual_routes['Number of Trips'].idxmax()]\ncasual_max_dist_route = casual_nr_routes.loc[casual_nr_routes['Distance'].idxmax()]","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:36:48.143623Z","iopub.execute_input":"2024-04-19T04:36:48.144077Z","iopub.status.idle":"2024-04-19T04:36:48.159862Z","shell.execute_reply.started":"2024-04-19T04:36:48.144042Z","shell.execute_reply":"2024-04-19T04:36:48.158655Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!pip install openrouteservice","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:15:25.580381Z","iopub.execute_input":"2024-04-19T04:15:25.580726Z","iopub.status.idle":"2024-04-19T04:15:42.419652Z","shell.execute_reply.started":"2024-04-19T04:15:25.580695Z","shell.execute_reply":"2024-04-19T04:15:42.418081Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import openrouteservice\nfrom openrouteservice import convert\nAPI_KEY = 'YOUR_API_KEY'\nclient = openrouteservice.Client(key=API_KEY)\n\n# Define a function to fetch coordinates\ndef fetch_route_coords(route_data):\n    return (\n        (route_data['Start_Longitude'], route_data['Start_Latitude']),\n        (route_data['End_Longitude'], route_data['End_Latitude'])\n    )\n\n# Define a function to fetch route directions\ndef fetch_route_directions(start_coords, end_coords):\n    return client.directions([start_coords, end_coords], profile='cycling-road', optimize_waypoints=True)\n\n# Define a function to decode route geometry\ndef decode_route_geometry(route_res):\n    geometry = route_res['routes'][0]['geometry']\n    return convert.decode_polyline(geometry)","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:37:00.781735Z","iopub.execute_input":"2024-04-19T04:37:00.782815Z","iopub.status.idle":"2024-04-19T04:37:00.790982Z","shell.execute_reply.started":"2024-04-19T04:37:00.782771Z","shell.execute_reply":"2024-04-19T04:37:00.789948Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Define lists to store route coordinates\nannual_trips_coords = []\nannual_max_dist_coords = []\ncasual_trip_coords = []\ncasual_max_dist_coords = []\n\n# Define routes and their corresponding results in a list\nroutes = [\n    ('annual_trips', annual_max_trips_route),\n    ('annual_maxdist', annual_max_dist_route),\n    ('casual_trips', casual_max_trips_route),\n    ('casual_maxdist', casual_max_dist_route)\n]","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:37:02.294706Z","iopub.execute_input":"2024-04-19T04:37:02.295179Z","iopub.status.idle":"2024-04-19T04:37:02.555628Z","shell.execute_reply.started":"2024-04-19T04:37:02.295138Z","shell.execute_reply":"2024-04-19T04:37:02.554196Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Iterate through routes, fetch directions, and decode geometry\nfor route_name, route_data in routes:\n    start_coords, end_coords = fetch_route_coords(route_data)\n    route_res = fetch_route_directions(start_coords, end_coords)\n    decoded_geometry = decode_route_geometry(route_res)\n    globals()[f'{route_name}_res'] = route_res\n    globals()[f'{route_name}_decoded'] = decoded_geometry\n    # Assign start and end coordinates to respective variables\n    globals()[f'{route_name}_coords'] = (start_coords, end_coords)","metadata":{"execution":{"iopub.status.busy":"2024-04-19T04:37:07.969097Z","iopub.execute_input":"2024-04-19T04:37:07.969751Z","iopub.status.idle":"2024-04-19T04:37:08.235796Z","shell.execute_reply.started":"2024-04-19T04:37:07.969707Z","shell.execute_reply":"2024-04-19T04:37:08.234821Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Retrieve the data for the route with the maximum number of trips\nstart_station_name = annual_max_trips_route['Start_Station_Name']\nend_station_name = annual_max_trips_route['End_Station_Name']\ndistance = annual_max_trips_route['Distance']\nstart_coords, end_coords = fetch_route_coords(annual_max_trips_route)\n\n# Fetch route directions\nroute_res = fetch_route_directions(start_coords, end_coords)\ndecoded_geometry = decode_route_geometry(route_res)\n\n# Calculate centroid latitude and longitude\ncentroid_latitude = (start_coords[1] + end_coords[1]) / 2\ncentroid_longitude = (start_coords[0] + end_coords[0]) / 2\n\n# Create a Folium map\npopup_font_size = \"12px\"\ndistance_txt = f\"<h4 style='font-size: {popup_font_size};'><b>Distance: ≈&nbsp;</b><strong>{round(distance,2)} Km</strong></h4>\"\npopup_content = f\"<h4 style='font-size: {popup_font_size};'><b>Route: {start_station_name} to {end_station_name}</b></h4>{distance_txt}\"\npopup = folium.Popup(popup_content, max_width=200)\n\nm = folium.Map(location=[centroid_latitude, centroid_longitude], zoom_start=16, control_scale=True, tiles=\"OpenStreetMap\")\n\n# Add route GeoJson to the map with popup content\nfolium.GeoJson(decoded_geometry).add_child(popup).add_to(m)\n\n# Add marker for start station\nfolium.Marker(location=[start_coords[1], start_coords[0]], popup=start_station_name, icon=folium.Icon(color='green')).add_to(m)\n\n# Add marker for end station\nfolium.Marker(location=[end_coords[1], end_coords[0]], popup=end_station_name, icon=folium.Icon(color='red')).add_to(m)\n\n# Save the map to an HTML file\nfilename = f\"{start_station_name.replace(' ', '_')}_to_{end_station_name.replace(' ', '_')}_route.html\"\nm.save(filename)\n\n# Create iframe to display HTML\niframe = f'<iframe src=\"{filename}\" width=\"480\" height=\"540\"></iframe>'\ndisplay(HTML(iframe))\n","metadata":{"execution":{"iopub.status.busy":"2024-04-19T07:43:02.769553Z","iopub.execute_input":"2024-04-19T07:43:02.772314Z","iopub.status.idle":"2024-04-19T07:43:02.952367Z","shell.execute_reply.started":"2024-04-19T07:43:02.772253Z","shell.execute_reply":"2024-04-19T07:43:02.950853Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Retrieve the data for the route with the maximum number of trips\nstart_station_name = casual_max_trips_route['Start_Station_Name']\nend_station_name = casual_max_trips_route['End_Station_Name']\ndistance = casual_max_trips_route['Distance']\nstart_coords, end_coords = fetch_route_coords(casual_max_trips_route)\n\n# Fetch route directions\nroute_res = fetch_route_directions(start_coords, end_coords)\ndecoded_geometry = decode_route_geometry(route_res)\n\n# Calculate centroid latitude and longitude\ncentroid_latitude = (start_coords[1] + end_coords[1]) / 2\ncentroid_longitude = (start_coords[0] + end_coords[0]) / 2\n\n# Create a Folium map\npopup_font_size = \"12px\"\ndistance_txt = f\"<h4 style='font-size: {popup_font_size};'><b>Distance: ≈&nbsp;</b><strong>{round(distance,2)} Km</strong></h4>\"\npopup_content = f\"<h4 style='font-size: {popup_font_size};'><b>Route: {start_station_name} to {end_station_name}</b></h4>{distance_txt}\"\npopup = folium.Popup(popup_content, max_width=200)\n\nm = folium.Map(location=[centroid_latitude, centroid_longitude], zoom_start=15, control_scale=True, tiles=\"OpenStreetMap\")\n\n# Add route GeoJson to the map with popup content\nfolium.GeoJson(decoded_geometry).add_child(popup).add_to(m)\n\n# Add marker for start station\nfolium.Marker(location=[start_coords[1], start_coords[0]], popup=start_station_name, icon=folium.Icon(color='green')).add_to(m)\n\n# Add marker for end station\nfolium.Marker(location=[end_coords[1], end_coords[0]], popup=end_station_name, icon=folium.Icon(color='red')).add_to(m)\n\n# Save the map to an HTML file\nfilename = f\"{start_station_name.replace(' ', '_')}_to_{end_station_name.replace(' ', '_')}_route.html\"\nm.save(filename)\n\n# Create iframe to display HTML\niframe = f'<iframe src=\"{filename}\" width=\"540\" height=\"640\"></iframe>'\ndisplay(HTML(iframe))\n","metadata":{"execution":{"iopub.status.busy":"2024-04-19T07:43:10.203376Z","iopub.execute_input":"2024-04-19T07:43:10.203838Z","iopub.status.idle":"2024-04-19T07:43:10.277906Z","shell.execute_reply.started":"2024-04-19T07:43:10.203794Z","shell.execute_reply":"2024-04-19T07:43:10.276357Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Retrieve the data for the route with the maximum number of trips\nstart_station_name = annual_max_dist_route['Start_Station_Name']\nend_station_name = annual_max_dist_route['End_Station_Name']\ndistance = annual_max_dist_route['Distance']\nstart_coords, end_coords = fetch_route_coords(annual_max_dist_route)\n\n# Fetch route directions\nroute_res = fetch_route_directions(start_coords, end_coords)\ndecoded_geometry = decode_route_geometry(route_res)\n\n# Calculate centroid latitude and longitude\ncentroid_latitude = (start_coords[1] + end_coords[1]) / 2\ncentroid_longitude = (start_coords[0] + end_coords[0]) / 2\n\n# Create a Folium map\npopup_font_size = \"12px\"\ndistance_txt = f\"<h4 style='font-size: {popup_font_size};'><b>Distance: ≈&nbsp;</b><strong>{round(distance,2)} Km</strong></h4>\"\npopup_content = f\"<h4 style='font-size: {popup_font_size};'><b>Route: {start_station_name} to {end_station_name}</b></h4>{distance_txt}\"\npopup = folium.Popup(popup_content, max_width=200)\n\nm = folium.Map(location=[centroid_latitude, centroid_longitude], zoom_start=13, control_scale=True, tiles=\"OpenStreetMap\")\n\n# Add route GeoJson to the map with popup content\nfolium.GeoJson(decoded_geometry).add_child(popup).add_to(m)\n\n# Add marker for start station\nfolium.Marker(location=[start_coords[1], start_coords[0]], popup=start_station_name, icon=folium.Icon(color='green')).add_to(m)\n\n# Add marker for end station\nfolium.Marker(location=[end_coords[1], end_coords[0]], popup=end_station_name, icon=folium.Icon(color='red')).add_to(m)\n\n# Save the map to an HTML file\nfilename = f\"{start_station_name.replace(' ', '_')}_to_{end_station_name.replace(' ', '_')}_route.html\"\nm.save(filename)\n\n# Create iframe to display HTML\niframe = f'<iframe src=\"{filename}\" width=\"480\" height=\"720\"></iframe>'\ndisplay(HTML(iframe))","metadata":{"execution":{"iopub.status.busy":"2024-04-19T07:43:17.684979Z","iopub.execute_input":"2024-04-19T07:43:17.685510Z","iopub.status.idle":"2024-04-19T07:43:17.769140Z","shell.execute_reply.started":"2024-04-19T07:43:17.685471Z","shell.execute_reply":"2024-04-19T07:43:17.767352Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Retrieve the data for the route with the maximum number of trips\nstart_station_name = casual_max_dist_route['Start_Station_Name']\nend_station_name = casual_max_dist_route['End_Station_Name']\ndistance = casual_max_dist_route['Distance']\nstart_coords, end_coords = fetch_route_coords(casual_max_dist_route)\n\n# Fetch route directions\nroute_res = fetch_route_directions(start_coords, end_coords)\ndecoded_geometry = decode_route_geometry(route_res)\n\n# Calculate centroid latitude and longitude\ncentroid_latitude = (start_coords[1] + end_coords[1]) / 2\ncentroid_longitude = (start_coords[0] + end_coords[0]) / 2\n\n# Create a Folium map\npopup_font_size = \"12px\"\ndistance_txt = f\"<h4 style='font-size: {popup_font_size};'><b>Distance: ≈&nbsp;</b><strong>{round(distance,2)} Km</strong></h4>\"\npopup_content = f\"<h4 style='font-size: {popup_font_size};'><b>Route: {start_station_name} to {end_station_name}</b></h4>{distance_txt}\"\npopup = folium.Popup(popup_content, max_width=200)\n\nm = folium.Map(location=[centroid_latitude, centroid_longitude], zoom_start=13, control_scale=True, tiles=\"OpenStreetMap\")\n\n# Add route GeoJson to the map with popup content\nfolium.GeoJson(decoded_geometry).add_child(popup).add_to(m)\n\n# Add marker for start station\nfolium.Marker(location=[start_coords[1], start_coords[0]], popup=start_station_name, icon=folium.Icon(color='green')).add_to(m)\n\n# Add marker for end station\nfolium.Marker(location=[end_coords[1], end_coords[0]], popup=end_station_name, icon=folium.Icon(color='red')).add_to(m)\n\n# Save the map to an HTML file\nfilename = f\"{start_station_name.replace(' ', '_')}_to_{end_station_name.replace(' ', '_')}_route.html\"\nm.save(filename)\n\n# Create iframe to display HTML\niframe = f'<iframe src=\"{filename}\" width=\"480\" height=\"720\"></iframe>'\ndisplay(HTML(iframe))","metadata":{"execution":{"iopub.status.busy":"2024-04-19T07:43:23.775006Z","iopub.execute_input":"2024-04-19T07:43:23.775501Z","iopub.status.idle":"2024-04-19T07:43:23.963935Z","shell.execute_reply.started":"2024-04-19T07:43:23.775461Z","shell.execute_reply":"2024-04-19T07:43:23.962331Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]}]}